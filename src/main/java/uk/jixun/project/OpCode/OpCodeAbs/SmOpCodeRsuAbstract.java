package uk.jixun.project.OpCode.OpCodeAbs;



// !!!                               !!!
// !!!             STOP              !!!
// !!!                               !!!
//     DO NOT EDIT THIS FILE BY HAND    


// This file was generated using an automated script.
// See 'scripts' directory for more information



import uk.jixun.project.OpCode.AbstractBasicOpCode;
import uk.jixun.project.OpCode.SmOpCodeEnum;
import uk.jixun.project.Register.SmRegister;

import java.util.HashMap;

public abstract class SmOpCodeRsuAbstract extends AbstractBasicOpCode {

  private static HashMap<Integer, Integer> mapConsume = new HashMap<>();
  private static HashMap<Integer, Integer> mapProduce = new HashMap<>();

  static {
    

    
      mapConsume.put(2, 2);
      mapProduce.put(2, 2);
    
      mapConsume.put(3, 3);
      mapProduce.put(3, 3);
    
      mapConsume.put(4, 4);
      mapProduce.put(4, 4);
    
  }

  @Override
  public SmOpCodeEnum getOpCodeId() {
    return SmOpCodeEnum.RSU;
  }

  @Override
  public int getProduce() {
    return mapProduce.getOrDefault(getVariant(), 0);
  }

  @Override
  public int getConsume() {
    return mapConsume.getOrDefault(getVariant(), 0);
  }

  @Override
  public boolean accessRam() {
    
    if (variant == 2) {
      return false;
    }

    if (variant == 3) {
      return false;
    }

    if (variant == 4) {
      return false;
    }

    throw new RuntimeException("Unsupported variant for this opcode.");
  }

  @Override
  public void setVariant(int variant) {
    if ((variant == 2) || (variant == 3) || (variant == 4)) {
      this.variant = variant;
    }
  }

  @Override
  public void setRegisterVariant(SmRegister regVariant) {
    if (regVariant != SmRegister.NONE) {
      throw new RuntimeException("RegisterVariant does not apply for this opcode.");
    }
  }
}
